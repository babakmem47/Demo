1. Create this steps.txt
	- Add bootstrap-united(modified) from LNDCodefirst to Content folder.
	- Change BundleConfig bootstrap: "~/Content/bootstrap.css", -> "~/Content/bootstrap-united.css",
	- Clear index page. 
	- Download IranSansWeb.woff fonts(5) from https://changal.com/assets/fonts/iran-sans/woff/. Put it into Font folder.
2. Add bootstrap-united + Download IranSansWeb.woff
	- Layout.cshtml:
		Consolidate jquery and bootstrap.js into lib
	- BundleConfig:
		Complete consolidating jQuery and Bootstrap.js:
				bundles.Add(new ScriptBundle("~/bundles/jquery").Include(			// Mistake: make it ~/bundles/lib
								"~/Scripts/jquery-{version}.js",
								"~/Scripts/bootstrap.js",
								"~/Scripts/respond.js"));
	- Layout.cshtml:
		Change 'div to 'nav' in <div class="navbar navbar-inverse navbar-fixed-top"> 
		Change 'container' to 'container-fluid' in <div class="container"> in 2 place in this page
		Delete @Html.ActionLink("Application name", ... and replace it with:
				<a class="navbar-brand" href="@Url.Action("Index", "Home")"> <span class="glyphicon glyphicon-home"></span></a>
		Copy NavBar Example for DropDown from https://getbootstrap.com/docs/3.3/examples/navbar/:
				<li class="dropdown">
				  <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
				  <ul class="dropdown-menu">
					<li><a href="#">Action</a></li>
					<li><a href="#">Another action</a></li>
					<li><a href="#">Something else here</a></li>
					<li role="separator" class="divider"></li>
					<li><a href="#">Separated link</a></li>
					<li role="separator" class="divider"></li>
					<li><a href="#">One more separated link</a></li>
				  </ul>
				</li>
		Paste it instead of <li>@Html.ActionLink("Home", "Index", "Home")</li>
		Farsination of Dropdowns
	- Add IranSansWeb.woff font:
		Site.css:
					.navbar-inverse {
						font-family: IranSansWeb;
					}
					.navbar-inverse navbar-fixed-top {
						direction: rtl;
					}
					@font-face {
						font-family: IranSansWeb;
						src: url(/fonts/IRANSansWeb.woff);
					}
	** Problem: navbar dropdown not collapsing!
3. DropDowns in Layout.cshtml + Add IRANSansWeb.woff to navbar
	## Solution: The cause of this problem is I didn't replace 'jquery' with 'lib' in BundleConfig after consolidating!

	// Move ورود to the left of navbar:
				.navbar-right {
					float: left !important;
				}

	// Make DropDowns in navbar closer to each other:
				.navbar-nav > li  {
					padding-left: 20px;
				}

	// Make font size of each dropdown smaller:
				.navbar-nav > li > a {
					font-size: 14px;
				}
	// Move the menu below each DropDown to the left:
				.dropdown-menu {
					margin: 2px -46px 0;
				}
 4. Improving the look and feel of NavBar
	
	- Separate ApplicationDbContext.cs and ApplicationUser.cs from IdentityModels.cs
	- Execute Enable-Migration
	- Execute Add-Migration InitialModel
	- Change Web.config to point to LNDServer:
	<add name="DefaultConnection" connectionString="Data Source=LNDSRVBK\LND_INSTANCE;Initial Catalog=Demo;Integrated Security=False;User Id=sa;Password=Qwe123;MultipleActiveResultSets=True" providerName="System.Data.SqlClient" />
	- Execute Add-Migration InitialModel
	- Execute Update-Database
5. Enable Migration 

	- Create IpRange and Setad class
		public class IpRange
		{
			public int Id { get; set; }

			public string Range { get; set; }

			public string Mask { get; set; }

			public ICollection<Setad> Setads { get; set; }
		}

		public class Setad
		{
			public int Id { get; set; }

			public string Name { get; set; }

			public string Shakhes { get; set; }

			public bool IsModiriatShoab { get; set; }

			public string Address { get; set; }

			public IpRange IpRange { get; set; }

			public int IpRangeId { get; set; }
		}

	- Add IpRange and Setad DbSet<> to ADBC:
		 public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
		 {
			public DbSet<IpRange> IpRanges { get; set; }
			public DbSet<Setad> Setads { get; set; }
			.
			.
			.
	

	- Add 'EntityConfigurations' folder in Solution Explorer to put Fluent APIs in it
	- Add 'IpRangeConfiguration.cs' and SetadConfiguration.cs and add Fluent APIs to it:
		public class IpRangeConfiguration : EntityTypeConfiguration<IpRange>
		{
			public IpRangeConfiguration()
			{
				HasKey(ip => ip.Id);

				Property(ip => ip.Range)
					.IsRequired()
					.HasMaxLength(15)
					.HasColumnAnnotation(
						IndexAnnotation.AnnotationName,
						new IndexAnnotation(new IndexAttribute { IsUnique = true })
						);

				Property(ip => ip.Mask)
					.IsRequired()
					.HasMaxLength(2).IsFixedLength();

				// One-to-Many with Setad
				HasMany(ip => ip.Setads)
					.WithRequired(st => st.IpRange)
					.HasForeignKey(st => st.IpRangeId)
					.WillCascadeOnDelete(false);
			}
		}

		public class SetadConfiguration : EntityTypeConfiguration<Setad>
		{
			public SetadConfiguration()
			{
				HasKey(st => st.Id);

				Property(st => st.Name)
					.IsRequired()
					.HasMaxLength(50);

				Property(st => st.Shakhes)
					.HasMaxLength(4).IsFixedLength();

				Property(st => st.IsModiriatShoab)
					.IsRequired();

				Property(st => st.Address)
					.HasMaxLength(200);

				// Many-to-One with IpRange
				HasRequired(st => st.IpRange)
					.WithMany(ip => ip.Setads);

			}
		}

	- Create OnModelCreating method in ADBC:
		protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
			base.OnModelCreating(modelBuilder);
		}
	- Add Definition of IpRangeConfiguration.cs and SetadConfiguration.cs to onModelCreating method of ADBC
		protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
			modelBuilder.Configurations.Add(new IpRangeConfiguration());
			modelBuilder.Configurations.Add(new SetadConfiguration());

			base.OnModelCreating(modelBuilder);
		}

	- Add-Migration AddIpRangeAndSetadClassWithFluentApi
	- Update-Database.
6. Add IpRange.cs and Setad.cs with FluentApi.

	- Add Email field to Setad.cs:
		public string Email { get; set; }
	- Define FluentAPI:
		Property(st => st.Email)
			.IsOptional()
			.HasMaxLength(30);
	- PM> Add-Migration AddEmailToSetad
	- PM> Update-Database
7. Add Email Field to Setad

	- Add Provice class:
		public class Province
		{
			public int Id { get; set; }

			public string ProvinceName { get; set; }

			public byte Octet3 { get; set; }

			public string CityCenter { get; set; }

			public string PreTelCode { get; set; }

			public Setad Setad { get; set; }

			public int? SetadId { get; set; }
		}

	- Add Corresponding FluentAPI:
		public class ProvinceConfiguration : EntityTypeConfiguration<Province>
		{
			public ProvinceConfiguration()
			{
				Property(pr => pr.ProvinceName)
					.IsRequired()
					.HasMaxLength(25);

				Property(pr => pr.Octet3)
					.IsOptional();

				Property(pr => pr.CityCenter)
					.IsRequired()
					.HasMaxLength(25);

				Property(pr => pr.PreTelCode)
					.IsOptional()
					.HasMaxLength(4);
			
				// One-To-(0..1) with Setad
				HasOptional(pr => pr.Setad)
					.WithRequired(st => st.Province);
			}
		}
	- Add FluentAPI to SetadConfiguration:
		HasOptional(st => st.Province)
			.WithRequired(pr => pr.Setad);
	- Add below to ADBC:
		public DbSet<Province> Provinces { get; set; }
		.
			modelBuilder.Configurations.Add(new ProvinceConfiguration());
		.
	- Build + Add-Migration AddProvinceClassWithFluentApi + Update-Database
8. Add Province Class With FluentApi

	- Populate Provinces:
		PM> Add-Migration PopulateProvinces
	** Cannot Populate Province
	## Finally I change relation between Setad and Province to Many-To-One:
		In Setad.cs:
			public Province Province { get; set; }

			public int? ProvinceId { get; set; }

		In Province.cs:
			public ICollection<Setad> Setads { get; set; }
		
		In SetadConfiguration: First Remove One-to-(0..1) relationship (see above)
			
			// Many-to-(0..1) with Province
			HasOptional(st => st.Province)
				.WithMany(pr => pr.Setads)
				.HasForeignKey(st => st.ProvinceId)
				.WillCascadeOnDelete(false);
		
		PM> Add-Migration PopulateProvinces
		Insert SQL statement in this migration:
		Sql(@"
			INSERT [dbo].[Provinces] ([ProvinceName], [CityCenter], [PreTelCode], [Octet3]) VALUES (N'تهران', N'تهران', N'021', 0)
			INSERT [dbo].[Provinces] ([ProvinceName], [CityCenter], [PreTelCode], [Octet3]) VALUES (N'قم', N'قم', N'025', 5)
		");
		PM> Update-Database
9. Change relation between Setad and Province to Many-To-One and Populate Province from migration

	We decide to get Id of each province by ourself so :
	- 1.in SQLServer execute below query to delete all rows in Provinces table.
		DELETE  From Provinces
	  
	- Set Provice identity of Id to False for manually insert Id for each province:
			Property(pr => pr.Id)
				.HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
	With above code, in SQLServer, Identity change to False after executing 2 below commands:
	- PM> Add-Migration ChangeIdentityToFalseForIdInProvice
	- PM> Update-Database
	It is better to remove Octet3 column because it is not belong here. Instead we use this new manual Id.
	- In Province.cs remove following line:
		public byte Octet3 { get; set; }
	- In ProvinceConfiguration remove the following config because we no longer having Octet3:
			Property(pr => pr.Octet3)
				.IsOptional();
	- Build + Add-Migration RemoveOctet3FromProvince + Update-Database
	
	Now we repopulate Province with below:
	- PM> Add-Migration RepopulateProvinceUsingManualId
	Insert SQL statement in this migration:
	Sql(@"
		INSERT [dbo].[Provinces] ([Id], [ProvinceName], [CityCenter], [PreTelCode]) VALUES (4, N'تهران', N'تهران', N'021')
		INSERT [dbo].[Provinces] ([Id], [ProvinceName], [CityCenter], [PreTelCode]) VALUES (5, N'قم', N'قم', N'025')
		INSERT [dbo].[Provinces] ([Id], [ProvinceName], [CityCenter], [PreTelCode]) VALUES (6, N'یزد', N'یزد', N'035')
		.
		.
	");
	PM> Update-Database
10. Province: Clear rows + Make Id Column Manual(identity:false) + Remove Octet3 Column + Repopulate Rows.

	We want to populate IpRanges class using loop in SQLServer:
	- PM> Add-Migration PopulateIpRangeClassUsingSqlLoop
	- Add SQL statements like below in new migration:
		Sql(@"
			DECLARE @count AS INT = 1
			DECLARE @last AS INT = 35
			DECLARE @ip AS NVARCHAR

			WHILE(@count <= @last)
			BEGIN
				INSERT INTO IpRanges([Range],[Mask])
				VALUES('172.16.'  + CAST(@count AS VARCHAR) + '.0', '24')
				SET @count += 1
			END
		");	
	We want to add a column name 'IsUnused' to IpRange in case if we decide to dot using a range of ip, set it to True;
	- Add below prop in IpRange.cs:
		public bool IsUnused { get; set; }

	- Build + Add-Migration AddIsUnusedColumnToIpRange + Update-Database
11. Add IsUnused property to IpRange(Logical delete)

	- forgotten step: Remove rows in Down Method of Populate Migrations:
		In RepopulateProvince migration add below code into down method:
			Sql("DELETE FROM Provinces WHERE Id IN (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
			17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35)");
		
	Create a simple form to allow us to capture a new Setad:
	- Create Setad controller.
	- Create index view for Index action for the future.
	- Create a new action and name it Create()
	- Create view for Create action(Alt+Enter)
	- Add a link in navigation bar to navigate us to this view for adding new Setad.:
		<li><a href="@Url.Action("Index", "Setad")">ستاد و ادارات</a></li>
	
	- Make the header of index page for Setad and Edarat persian and center align:
		In Site.css:
			.persianHeader {
				text-align: center;
				font-family: IranSansWeb;
			}                          
		In \Views\Setad\Index.cshtml:
			<h2 class="persianHeader">ستاد و ادارات</h2>

	- Add a button: "افزودن ستاد(اداره) جدید" to \Views\Setad\Index.cshtml
	@Html.ActionLink("افزودن ستاد(اداره) جدید", "Create", "Setad", null, new { @class = "btn btn-primary btn-persian" })
12. Down Method of Populate Migrations(remove rows) + SetadController + Create Action + link in 
	NavBar + button in \Views\Setad\Index.cshtml


	/// Add a Form with inputs and ... in \Views\Setad\Create.cshtml to capture a new Setad ///	
	- Create a new folder called 'ViewModels' in Solution Explorer.
	- Create a new class in it and name it 'SetadFormViewModel' and create the properties we need in it:
		public class SetadFormViewModel
		{
			[Display(Name = "نام ")]
			public string Name { get; set; }

			[Display(Name = "شاخص")]
			public string Shakhes { get; set; }

			[Display(Name = "آدرس")]
			public string Address { get; set; }

			[Display(Name = "استان")]
			public int? ProvinceId { get; set; }                    // use it in DropDownList

			public IEnumerable<Province> Provinces { get; set; }   // created for showing the list in DropDown

			public bool IsModiriatShoab { get; set; }

			public int IpRangeId { get; set; }
		
			[Display(Name = "ایمیل")]
			public string Email { get; set; }
		}

	- In Create.cshtml, detemine the model behind this view:
		@model Demo.Models.SetadFormViewModel
	
	- Create <div class="row col-lg-.." to create vertical space for form
	- Remove <footer> in _Layout.cshtml because it move to up!
	- Create form like below in \Views\Setad\Create.cshtml:
		<form>
		<div class="form-group">
			@Html.LabelFor(m => m.Name)
			@Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "نام ستاد..." })
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.Shakhes)
			@Html.TextBoxFor(m => m.Shakhes, new { @class = "form-control", placeholder = "چهار رقم..." })
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.ProvinceId)
			@Html.DropDownListFor(m => m.ProvinceId, new SelectList(Model.Provinces, "Id", "ProvinceName"), new { @class = "form-control" })
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.Address)
			@Html.TextAreaFor(m => m.Address, new { @class = "form-control", placeholder = "خیابان ..." })
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.Email)
			@Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "ایمیل ستاد ..." })
		</div>
		<br/>
		<br/>
		<button type="submit" class="btn btn-primary">ذخیره</button>
		</form>
	
	- remove "My ASP.NET Application" from the title of page:
		In _Layout -> <title> -> remove it!
13. Add a Form with inputs and DropDown and TextArea in \Views\Setad\Create.cshtml to capture a new Setad.

	// Add IpRange DropDown to Form for picking Ip address range:
	- Add below prop to SetadFormViewModel
		public IEnumerable<IpRange> IpRanges { get; set; }

	- Add annotation to IpRangeId		
		[Display(Name = "رنج آی پی")]
		public int IpRangeId { get; set; }

	- Add below DropDown in \Views\Setad\Create.cshtml after Shakhes(make it choose nothing by default when loads):
		<div class="form-group">
			@Html.LabelFor(m => m.IpRangeId)
			@Html.DropDownListFor(m => m.IpRangeId, new SelectList(Model.IpRanges, "Id", "Range"), "", new { @class = "form-control" })
		</div>
	
	- Add below to viewModel in SetadController:
		IpRanges = _context.IpRanges.ToList(),
	
	- Build
14. Add IpRange DropDown to Form for picking Ip address range

	// Specify target action for the form(which action executed after sending data in the form to Controller)
	- Replace <form> with @Html.BeginForm
		@using (Html.BeginForm("Create", "Setad"))
		{
			// move html elements in form here
		}
	- Create 'Create' action with [HttpPost] attribute in Setad Controller:
			[HttpPost]
		public ActionResult Create(SetadFormViewModel viewModel)
		{
			var setad = new Setad
			{
				Name = viewModel.Name,
				IpRangeId = viewModel.IpRangeId,
				ProvinceId = viewModel.ProvinceId,
				Shakhes = viewModel.Shakhes,
				Email = viewModel.Email,
				Address = viewModel.Address
			};

			_context.Setads.Add(setad);
			_context.SaveChanges();

			return RedirectToAction("Index", "Setad");
		}

	- We complete it in the future. For now it is OK.
15. Implementing Save a setad without validation.

	// Add IsModiriatShoab to form
	- Add below DropDown in \Views\Setad\Create.cshtml after Shakhes:
		<div class="checkbox">
			<label class="checkbox">
				@Html.CheckBoxFor(m => m.IsModiriatShoab)
				<span class="prevent-overlap">@Html.DisplayNameFor(m => m.IsModiriatShoab)</span>
			</label>
		</div>

	- Add class .prevent-overlap in Site.css to prevent checkbox and lable overlapping:
		.prevent-overlap {
			padding-right: 20px;
		}

	- Add [Display(Name = "آیا مدیریت شعب است؟")] for public bool IsModiriatShoab { get; set; }

	- Add script in Create.cshtml to show/hide Province when tick/untick the ModiriatShoab checkbox.
		@section scripts
		{
			<script>
				$(document).ready(function () {
					$("#ProvinceId").attr('disabled', 'disabled');

					$("#IsModiriatShoab").change(function() {
						if ($(this).is(':checked'))
							$("#ProvinceId").removeAttr('disabled');
						else
							$("#ProvinceId").attr('disabled', 'disabled');
					});
				});
			</script>
		}

	- Make IsModiriatShoab optional in SetadConfiguration:
			Property(st => st.IsModiriatShoab)
						.IsOptional();
	- PM> Add-Migration MakeIsModiriatShoabOptional
	- PM> Update-Database

	- PM> Add-Migration PopulateSetadWithModiriatShoabs
	- Add these sql lines below to new migration::
			Sql(@"
				INSERT [dbo].[Setads] ([Name], [IpRangeId]) VALUES (N' غرب تهران (منطقه چهار)', 1)
				INSERT [dbo].[Setads] ([Name], [IpRangeId]) VALUES (N'مرکزی تهران (منطقه دو)', 2)
				.
				.
				INSERT [dbo].[Setads] ([Name], [IpRangeId]) VALUES (N'کهکیلوئیه و بویراحمد', 35)
			");
	- PM> Update-Database
	- But I want to set IsModiriatShoab field for these 35 Province to True
	- I made a mistake: Delete MakeIsModiriatShoabOptional migration in Solution Explorer, then I try to Create new 
	  migration with the same name, but because I delete it after running Update-Database, It cause problem.
	- Solve:
		PM> Update-Database -TargetMigration 201902240602517_MakeIsModiriatShoabOptional
		Add these sql lines below to new migration:	
		Sql(@"
			INSERT [dbo].[Setads] ([Name], [IpRangeId], [IsModiriatShoab]) VALUES (N' غرب تهران (منطقه چهار, 1)', 1, 1)
			INSERT [dbo].[Setads] ([Name], [IpRangeId], [IsModiriatShoab]) VALUES (N'مرکزی تهران (منطقه دو, 1)', 2, 1)
			.
			.
			INSERT [dbo].[Setads] ([Name], [IpRangeId], [IsModiriatShoab]) VALUES (N'کهکیلوئیه و بویراحمد', 35, 1)
		");
		PM> Update-Database.

	- Notice that it is a typo in the first 4 line ',1' in parentheses.
	- Tip from StackOverflow:
		If you haven't used Update-Database you can just delete the migration file.
		If you've run the update you should roll it back using Update-Database -TargetMigration "NameOfPreviousMigration" 
		then delete the migration file.

	- PM> Update-Database -TargetMigration 201902240602517_MakeIsModiriatShoabOptional
	- In SQLServer:
		Delete all rows in SQLServer Setads table:		DELETE FROM [dbo].[Setads]
		Reset Identity field(Id):						DBCC CHECKIDENT ('Setads', RESEED, 0)
	- Delete 201902240631460_PopulateSetadWithModiriatShoabs in Solution explorer
	- PM> Add-Migration PopulateSetadWithModiriatShoabs
	- Add these sql lines below to new migration:	
		Sql(@"
			INSERT [dbo].[Setads] ([Name], [IsModiriatShoab], [IpRangeId], [ProvinceId]) VALUES (N' غرب تهران (منطقه چهار)', 1, 1, 4)
			INSERT [dbo].[Setads] ([Name], [IsModiriatShoab], [IpRangeId], [ProvinceId]) VALUES (N'مرکزی تهران (منطقه دو)', 1, 2, 4)
			INSERT [dbo].[Setads] ([Name], [IsModiriatShoab], [IpRangeId], [ProvinceId]) VALUES (N'شرق تهران (منطقه سه)', 1, 3, 4)
			.
			.
			INSERT [dbo].[Setads] ([Name], [IsModiriatShoab], [IpRangeId], [ProvinceId]) VALUES (N'کهکیلوئیه و بویراحمد', 1, 35, 35)
		");
	- PM> Update-Database.
	- Move IsModiriatShoab to the end of form in Create.cshtml
16. Add IsModiriatShoab to form + make int optional + Populate Setads table with ModiriatShoabs(1-35)

	// Enabling Client Side Validation First //
	- Check if it is enabled: Browser -> Inspect .. -> Network tab -> Clear -> Click submit button
	- In Create.cshtml, Add @Scripts.Render("~/bundles/jqueryval") into the first line of @section scripts:
		@section scripts
		{
			@Scripts.Render("~/bundles/jqueryval")

			<script>
				$(document).ready(function () {
				.
				.
				.
		}

	- Add below to Name field in SetadFormViewModel:
		[Required(ErrorMessage = "پر کردن فیلد نام اجباری است")]

	**	Problem: The message above not showing even submit button prevent page from proceed.
		It seems that client side validation working, because Inspect -> R-click on Name input ->
		data-val-required="پر کردن فیلد نام اجباری است" but it does not display on the page.
	
	##	Forgot to add below code in Create.cshtml:
			@Html.ValidationMessageFor(m => m.Name)
	
	- Add ValidationMessageFor for all elements in form in Create.cshtml.

	// Make validation error RED //
	- Make the error message text red:
		.field-validation-error {
			color: red;
		}
		
	- Make border of the field with error red:
		.input-validation-error {
			border: solid 2px red;
		}

	// Make Shakhes field accepts only digits and have fixed length = 4
		[StringLength(4, ErrorMessage = "طول فیلد حداکثر چهار رقم")]
		[Range(1, 9999, ErrorMessage = "مقدار غیر مجاز می باشد")]
		
	// Make Email field accept only email
		[EmailAddress(ErrorMessage = "آدرس ایمیل صحیح نیست")]		

	// toggle Province:
	<script>
		var provinceDiv = document.getElementById("provinceInForm");
		provinceDiv.style.display = "none";

		$(document).ready(function () {
			$("#IsModiriatShoab").change(function() {
				if (provinceDiv.style.display === "none")
					provinceDiv.style.display = "block";
				else
					provinceDiv.style.display = "none";
			});
		});
	</script>

17.	Enable client side validation. Toggle Province div in Create.cshtml

	// Enable Server Side validation
	- Add below code at the beginning of Create Action:
		public ActionResult Create(SetadFormViewModel viewModel)
			{

				if (!ModelState.IsValid)
				{
					viewModel.IpRanges = _context.IpRanges.ToList();
					viewModel.Provinces = _context.Provinces.ToList();

					return View("Create", viewModel);
				}
			.
			.
	// Check if server side validation is working(enabled):
	- Comment out @Scripts.Render("~/bundles/jqueryval") in Create.cshtml

18. Enable Server side validation   

	// Disable CSRF attack:
	- in Create.cshtml -> in the beginning of form:
		Html.AntiForgeryToken()

	- Decorate SetadController Create Action with:
		[ValidateAntiForgeryToken]

19. Disable CSRF attack in Create.cshtml form.

	// Change font for body and headings
	
	- in bootstrap.css search for 'Helvetica' 
	- Select a block with all headings(h1,h2,...h6)
	- Copy it and paste it in Site.css and add body in the beginning of it and replace Helvetica
	with IranSansWeb:
		body,
			h1,
			h2,
			h3,
			h4,
			h5,
			h6,
			.h1,
			.h2,
			.h3,
			.h4,
			.h5,
			.h6 {
				font-family: "IranSansWeb", Arial, "Helvetica Neue", Helvetica, Arial, sans-serif;
		}
	
	- Save -> Execute program -> Ctrl+Shift+R to reload css in the browser -> everything is fine

20. Change font for body and headings to IranSansWeb. 

	// Improving the Look and Feel
	// Make elements of form a little bit separated:
		.form-group {
			margin-bottom: 30px;
		}

	// Change the size of the lables(also Combobox items)
		body {
			font-size: 16px;
		}

	// make select in form fit to content
		select.form-control {
			width: fit-content;
			padding: 8px 12px
		}

	// Make textboxes a little bit larger and add more padding
	- padding: inc inc but we dont do it

	// make the corner of the textboxes more round
		.form-control {
			border-radius: 9px;
		}

	// Make the button a little bit bigger and curl the border:
		.btn {
			padding: 9px 20px;
			font-size: 16px;
			border-radius: 10px;
		}

	// Flat design: Disable hover effect/ Shadow around textboxes

21. Improving the look and feel of the form elements.

	// Add a DropDownList under User's name for SignOut and other options
	- https://getbootstrap.com/docs/3.3/components/#navbar
	- under  <ul class="nav navbar-nav navbar-right"> copy entire <li class="dropdown"> 
	- Or copy one of the previous dropdowns from _Layout.cshtml
	- _LoginPartial: paste it below <li> @Html.ActionLink("Hello " ... )
	- Replace @User.Identity.GetUserName() instead of Dropdown. 
	- Move <li> that include logout link inside the dropdown.
	- Remove <li> @Html.ActionLink("Hello " ... ) code block.
		<ul class="nav navbar-nav navbar-right">
			<li class="dropdown">
				<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@User.Identity.GetUserName() <span class="caret"></span></a>
				<ul class="dropdown-menu">
					<li><a href="#">مشاهده پیام های من</a></li>
					<li><a href="#">مشاهده آخرین تغییرات من</a></li>
					<li><a href="javascript:document.getElementById('logoutForm').submit()">خروج</a></li>
				</ul>
			</li>
		</ul>

22. Add a DropDownList In NabBar for User's name, SignOut and etc.	

	// Remove shadow from DropDown menu:
	- Add these 2 css to .dropdown-menu in Site.css
	.dropdown-menu {
		box-shadow: none;
		-webkit-box-shadow: none;
	}

	// Put red asterisk next to the lable of mandatory fields
	- In Site.css:
	.required:after 
	{
		content: "*";
		font-weight: bold;
		color: red; 
	}
	- In Create.cshtml add above class for mandatory field:
		@Html.LabelFor(m => m.Name, new { @class = "required" })

	// Put the focus on the first field of the form
	- add autofocus = "autofocus" after placeholder in textboxfor
		@Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "نام ستاد...", autofocus = "autofocus" })
23. Remove shadow from DropDown menu, Put red asterisk, Put the focus on the first field.

	// How to login with “UserName” instead of “Email”
	- In the AccountController -> Register method (POST)

	Change this:

	var user = new ApplicationUser { UserName = model.Email, Email = model.Email};
	
	to this:

	var user = new ApplicationUser
	{
		UserName = model.UserName,
		Email = model.Email
	};

	UserName is red because we dont have it in RegisterViewModel. So Create it with Alt+Enter and move it to the top and make it required:

	public class RegisterViewModel
	{
		[Required]
		public string UserName { get; set; }

	Then go into the Login.cshtml and change all corresponding e-mail model fields to username instead.

	Login.cshtml: change all m => m.Email to m => m.UserName

	Again, UserName is red. So Alt+Enter to create it in LoginViewModel in AccountViewModels.cs 
	and also change Display for password field. Note that the type of UserName must be string.
	Remove Email prop (It is necessary!!)
	
	public class LoginViewModel
	{
		[Required]
		[Display(Name = "نام کاربری")]
		public string UserName { get; set; }
				
		[Required]
		[DataType(DataType.Password)]
		[Display(Name = "کلمه عبور")]
		public string Password { get; set; }
		.
		.
		.
	}

	Go into the Login method (POST) in the AccountController and change model.Email to model.UserName.

	var result = await SignInManager.PasswordSignInAsync(model.UserName, model.Password, 
				 model.RememberMe, shouldLockout: false);

	Go to Register.cshtml -> Duplicate Email div -> Change first one to UserName 

	// Move Dropdown for User name in NavBar a little toward right for better display of items in it:
	.navbar-right {
		margin-left: 30px;
	}

24. login with UserName instead of Email + Move Dropdown for User into right.

	// improving Login page look and feel
	// We want to bring label and textbox for username and password next to each other
	- Replace div for 2 text boxes with the following code(like Create.cshtml label and textbox):
		<div class="form-group">
			@Html.LabelFor(m => m.UserName, new { @class = "labelNextToTextbox" })
			@Html.TextBoxFor(m => m.UserName, new { @class = "form-control textboxNextToLabel", autofocus = "autofocus" })
			@Html.ValidationMessageFor(m => m.UserName)
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.Password, new { @class = "labelNextToTextbox" })
			@Html.TextBoxFor(m => m.Password, new { @class = "form-control textboxNextToLabel" })
			@Html.ValidationMessageFor(m => m.Password)
		</div>

	- In Site.css:
		.labelNextToTextbox {
			float: right;
			padding: 7px;
			width: 70px;
			text-align: right;
		}

		.textboxNextToLabel {
			width:auto;
		}

	- Remove register link. We will make it accessible only for admin in the future. 

	// change the width of Shakhes field in Create.cshtml:
	#Shakhes {
		width:70px;
		padding: 8px 4px;  /* 4px to make placeholder fit in it */
	}

	// Make Shakhes field only accept integer digit (0 .. 9)
	- in script section in Create.cshtml:
		$("#Shakhes").on("keypress keyup blur",function (event) {    
			$(this).val($(this).val().replace(/[^\d].+/, ""));
			if ((event.which < 48 || event.which > 57)) {
				event.preventDefault();
			}
		});

	// Make Shakhes field only accept maximum 4 characters
	- Insert below 3 line codes in the above code block:
	$("#Shakhes").on("keypress keyup blur", function (event) {
		var value = $(this).val();
		if (value.length >= maxLength)
			event.preventDefault();
		.
		.
		.

25. Login Page: Label & Textbox for username and password next to each other. Make Shakhes field only accept 0-9 and max 4 char.

	// Display the list of Setad in Setad.cshtml
	- PM> Install-Package jquery.datatables -Version:1.10.11

	// We only use 2 scripts of all js files in /Scripts/DataDables/ folder
	// Include these two in our bundleconfig:
	- In BundleConfig.cs, add below code under ~/bundles/lib:
		"~/Scripts/DataTables/jquery.dataTables.js",
		"~/Scripts/DataTables/dataTables.bootstrap.js"));

	// Also we need to add datatable stylesheet to our css bundle
	- In BundleConfig.cs, add below code under ~/Content/css above site.css:
		"~/Content/DataTables/css/dataTables.bootstrap.css",
	// This stylesheet above make datatable like bootstrap table


	// /Setad/index.cshtml: 
	- copy/paste previous code from LNDCodeFirst\LNDCodeFirst\Views\Province\index in it
	- Edit the column name so it can display all information:
	- Replace setad instead of province
	
	// Change css of Datatable: 
	- Make یه چیزی بنویس...  font IranSansWeb and change the width of select 
	- In Site.css:
		/* DataTable Overrides*/
		div.dataTables_wrapper div.dataTables_filter input {
			font-family: IranSansWeb;
			font-size: 14px;
		}

		div.dataTables_wrapper div.dataTables_length select {
			width: 55px;
			padding: 3px 3px;
		}


	// Create Api for showing Setads in /Setad/index.cshtml
	- Create Api folder under Controllers -> R-Click -> Add Controller ... -> New Web Api 2 Controller - Empty
	- Name it SetadsController -> Copy "GlobalConfiguration.Configure(WebApiConfig.Register);" to Global.asax.cs
	- Open SetadsController: 
		private ApplicationDbContext _context;

		public SetadsController()
		{
			_context = new ApplicationDbContext();
		}

		public IEnumerable<SetadDto> GetAllSetads()
		{
			var setads = _context.Setads
				.Include(s => s.IpRange)
				.Include(s => s.Province)
				.ToList();

			return setads.Select(s => new SetadDto
			{
				Name = s.Name,
				IpRange = new IpRangeDto
				{
					Range = s.IpRange.Range,
					Mask = s.IpRange.Mask
				},
				Shakhes = s.Shakhes,
				Email = s.Email,
				Province = new ProvinceDto
				{
					Center = (s.ProvinceId != null) ? s.Province.CityCenter : "",
					Name = (s.ProvinceId != null) ? s.Province.ProvinceName : "",
					PreTel = (s.ProvinceId != null) ? s.Province.PreTelCode : ""
				},
				Address = s.Address,
				IsModiriatShoab = s.IsModiriatShoab
			});
		}

	Create 3 Dto class:
		public class SetadDto
		{
			public string Name { get; set; }
			public string Shakhes { get; set; }
			public bool IsModiriatShoab { get; set; }
			public string Address { get; set; }
			public IpRangeDto IpRange { get; set; }
			public string Email { get; set; }
			public ProvinceDto Province { get; set; }
			public int? ProvinceId { get; set; }
		}

		public class IpRangeDto
		{
			public string Range { get; set; }
			public string Mask { get; set; }
		}

		public class ProvinceDto
		{
			public string Name { get; set; }
			public string Center { get; set; }
			public string PreTel { get; set; }
		}

	- Test api with Postman. Everything works fine!
26. Install jQuery.DataTable + copy old config in /Setad/index.cshtml and edit + Create SetadsController api + Dtos

	// Using BootBox Dialog
	- bootboxjs.com -> Download -> copy bootbox.min.js into /Scripts folder -> R-Click on Scripts -> Add Existing item... ..
	-	bundles.Add(new ScriptBundle("~/bundles/lib").Include(
			.
			.
			.
			"~/Scripts/bootbox.min.js"));

			  
			  
	- At the end of datatable jquery, Define delete button:
			  {
						data: "id",
						render: function (data) {
							return "<button class='btn-link js-delete' data-setad-id=" + data + "> <span class='glyphicon glyphicon-remove'></span>" + "</button>";
						}
					}
				]
			});

			// Click event for delete button:
			$("#tableOfSetads").on("click", ".js-delete", function () {
				var button = $(this);
				bootbox.confirm("آیا مطمئن هستید که می خواهید این منطقه حذف شود؟",
					function (result) {
						if (result) {
							$.ajax({
								url: "/api/setads/" + button.attr("data-setad-id"),
								//method: "DELETE",
								success: function () {
									table.row(button.parents("tr")).remove().draw();
								}
							});
						}
					});
			});
27. Add bootbox.min.js to project

	// Create Api for Delete a Setad(logically) in SetadsController:
	- Add a new column 'IsDeleted' to Setad.cs:
		public bool? IsDeleted { get; set; }

	- PM> Add-Migration AddIsDeletedToSetad
	- PM> Update-Database
28. Add IsDeleted column to Setad.cs
	
	- Add message to return response of api 
			return Ok("Record '" + setad.Name + "' Logically Deleted Successfully");
	
	- Replace success with .done .fail chain method:
		$("#tableOfSetads").on("click", ".js-delete", function () {
		var button = $(this);
		bootbox.confirm("آیا مطمئن هستید که می خواهید این منطقه حذف شود؟",
			function (result) {
				if (result) {
					$.ajax({
							url: "/api/setads/" + button.attr("data-setad-id"),
							method: "DELETE"
						})
						.done(function() {
							table.row(button.parents("tr")).remove().draw();
						})
						.fail(function() {
							alert("Something failed");
						});
					}
				});
		});
29. Add message to return response of api + Replace success with .done .fail chain method

	// Make deleted row fadeOut:
		.done(function () {
			var rowToBeDelete = button.parents("tr");
			rowToBeDelete.fadeOut(400,
				function() {
					table.row(rowToBeDelete).remove().draw();
				});
		})
	
	// Use bootbox dialogue instead of confirm:
			$("#tableOfSetads").on("click", ".js-delete", function () {
				var button = $(this);
				var dialog = bootbox.dialog({
					title: 'تائید',
					message: "آیا مطمئن هستید که می خواهید این ستاد حذف شود؟",
					buttons: {
						no: {
							label: "خیر",
							className: 'btn-default btn-left-bootbox',
							callback: function () {
								bootbox.hideAll();
							}
						},
						yes: {
							label: "حذف",
							className: 'btn-danger',
							callback: function () {
								$.ajax({
										url: "/api/setads/" + button.attr("data-setad-id"),
										method: "DELETE"
									})
									.done(function () {
										var rowToBeDelete = button.parents("tr");
										rowToBeDelete.fadeOut(200,
											function () {
												table.row(rowToBeDelete).remove().draw();
											});
									})
									.fail(function () {
										alert("Something failed");
									});
							}
						}
					}
				});
			});



	// Add space between two button(خیر حذف) in Bootbox Dialog box:
		- Site.css:
			.btn-left-bootbox {
				margin-left: 20px;
			}
		- Add this line for  
				dialog.find('.btn-left-bootbox').css({ 'margin-left': '20px' });

	// Remove(disable) Sort icon from a column:
		- Add 'orderable: false,' to the beginning of definition of each column in jQuery:
			columns: [
				{
					orderable: false,
					data: ...
				}
		
			]
30. FadeOut deleted row + bootbox dialogue + space between two button + Remove(disable) Sort icon

	// Add Vertical Space Between the Heading and The items below it:
	- in Site.css, add these classes below before bootstrap overrdies:
		.voffset { margin-top: 2px; }
		.voffset1 { margin-top: 5px; }
		.voffset2 { margin-top: 10px; }
		.voffset3 { margin-top: 20px; }
		.voffset4 { margin-top: 40px; }
		.voffset5 { margin-top: 80px; }

	- Add this class to the first element(not sure it is the best practice)
		@Html.LabelFor(m => m.Name, new { @class = "required voffset4" })
31. Add Vertical Space Between the Heading and The items below.

	// Add a link below Ip Range combobox select (in Views/Setad/Create.cshtml) to create new IpRange and make it blue
		- @Html.ActionLink("ایجاد رنج جدید", "Create", "Ip", null, new { @class = "colorblue" })
		- in Site.css:
			.colorblue {
				color: blue;
			}
	// in the above link, both "Create" and "Ip" are red. "Create" is an action in "IpRange" Controller:
	// Create Ip Controller:
		-  in Solution Explorer: R-Click on Controllers -> Add -> Controllers... -> MVC5 Controller - Empty -> name it: IpRangeController
		- Alt+Enter on red View() in new controller to create corresponding view (Views/IpRange/index.cshtml)
	
	// Create "Create" action in Ip Controller:
		- IpRangeController -> mvcaction4 tab -> name it Create ->  Alt+Enter on red View() to create corresponding view (Views/IpRange/Create.cshtml)
		- Change the title of new view:
			<h2>ایجاد رنج آی پی جدید</h2>
		
		- Test the link (in Views/Setad/Create.cshtml). It has to work properly!
32. Add a link below Ip Range combobox for new IpRange + Add IpRangeController + Create Action 'Create' + Create views for Index and Create + Test link

	// Add 2 column: DateCreated and DateModified to IpRange:
	- Add 2 prop below to IpRange.cs:
		public DateTime DateCreated { get; set; }        
		public DateTime? DateModified { get; set; }
	
	- Add Fluent Api for these new columns to IpRangeConfiguration.cs:
		
		Property(ip => ip.DateCreated)
		.IsRequired();

		Property(ip => ip.DateModified)
			.IsOptional();
 
	- PM> Add-Migration DateCreatedAndDateModifiedToIpRange
	- PM> Update-Database

	- In SQLServer, execute below query to update newly created DateCreated column to DateTime.Now(); or set it to today's datetime:

		UPDATE [dbo].[IpRanges]
		SET  [DateCreated] = GETDATE();
33. Add DateCreated and DateModified to IpRange and set DateCreated to today's datetime.

	// Show existing Ip Ranges in Views/IpRange/index.cshtml:
	- Copy /Setad/Index.cshtml code into Views/IpRange/index.cshtml
	- Edit it and save a sample in index.cshtml with DataTable.txt
34. Prepare Views/IpRange/index.cshtml.

	// Create api for getting list of ip ranges:
	- Controllers Api folder -> R-Click -> Add Controller ... -> New Web Api 2 Controller - Empty
	- Name it IpRangesController, open it:
		public IEnumerable<IpRange> GetAll()
		{
			var ipRanges = _context.IpRanges
				.Where(ip => !ip.IsUnused)
				.Include(ip => ip.Setads)
				.ToList();

			return ipRanges;
		}

	- Add ctor to IpRange.cs(forget to initialize a list when we define it):
		public IpRange()
		{
			Setads = new List<Setad>();
		}

	- Test it with Postman, Getting Error:
	{
		"message": "An error has occurred.",
		"exceptionMessage": "The 'ObjectContent`1' type failed to serialize the response body for content type 'application/json; charset=utf-8'.",
		"exceptionType": "System.InvalidOperationException",
		"stackTrace": null,
		"innerException": {
		"message": "An error has occurred.",
		"exceptionMessage": "Self referencing loop detected for property 'ipRange' with type 'Demo.Models.IpRange'. Path '[0].setads[0]'.",
		"exceptionType": "Newtonsoft.Json.JsonSerializationException",
		"stackTrace": "   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(JsonWriter writer, Object value, 
		JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty)\r\n   at 
		.
		.
	}

	- Solution: Add the config below to WebApiConfig:
			GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
	- Test it and get the required result:

35. Create IpRangesController + Action GetAll return all IpRanges with corresponding Setad.
	
	// Put the result of api into Dto without AutoMapper
	- Change the api like below:	
		public IEnumerable<IpRangeDto> GetAll()
		{
			var ipRanges = _context.IpRanges
				.Where(ip => !ip.IsUnused)
				.Include(ip => ip.Setads)
				.ToList();

			return ipRanges.Select(x => new IpRangeDto
			{
				IprangeId = x.Id,
				Range = x.Range,
				Mask = x.Mask,
				DateCreated = x.DateCreated,
				DateModified = x.DateModified,
				SetadDtos = x.Setads.Where(s => s.Id == x.Id)
			});
		}

	- Add IpRangeId prop to IpRangeDto.cs 
		public int IprangeId { get; set; }
	- Change ICollectio prop from public ICollection<SetadDto> SetadDtos to:
		public IEnumerable<Setad> SetadDtos { get; set; }
36. Return result of ip range and related setad without using AutoMapper.

	// Problem: the result is including too many info. We just need a related setad name for any ip range
	- Delete or comment out SetadDtos prop in IpRangeDto

	- Add a new prop in IpRangeDto and name it RelatedSetad
		public string RelatedSetad { get; set; }


	- Replace below code line instead of SetadDtos initialization in Api:
		RelatedSetad = _context.Setads.SingleOrDefault(s => s.Id == x.Id).Name

37. make the result only return name of related setad for each ip range.

	- Create a new link "رنج های آی پی موجود" in navigation bar and move "تعریف رنج جدید" up:
		<ul class="dropdown-menu">
			<li><a href="#">رنج های آی پی موجود</a></li>
			<li><a href="#">تعریف رنج جدید</a></li>
			<li><a href="#">تخصیص آی پی</a></li>
			<li><a href="#">جستجو</a></li>
		</ul>

	// Make ipRange column show "/ " + mask in front of range(before it can only shows range)
		{
			data: "ipRange",
			render: function (data) {
				return data.mask + "/ " + data.range;
			}
		},

38. Add 2 links in NavBar menu for Showing and Creating Ip range + Display /mask in front of range in DataTable.

	// Make ip range column in the DataTable left align
	- assign a class name "textalignleft" to the second column of DataTable in this way:
	- Add a line in columnDefs to assign a class name "textalignleft" to the iprange column(second column):
		"columnDefs": [
			{ "className": "textalignleft", "targets": [ 1 ] },
			{ "className": "text-center", "targets": "_all" }
		]

	- Add a class in Site.css:
		.textalignleft {
			text-align: left;
		}

39. Make ip range column in the DataTable left align